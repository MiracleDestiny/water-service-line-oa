generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      RoleEnum
  lineInfo  LineInfo? // Optional relation to avoid circular dependency issues
  orders    Order[]
}

model LineInfo {
  lineIdToken String   @id
  userId      String   @unique
  name        String
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  status           OrderEnum   @default(PENDING)
  orderItems       OrderItem[] // Relation to the join table
  user             User?       @relation(fields: [userId], references: [id])
  userId           String?
  deliveryLocation String?
  deliveryDate     DateTime?
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String
  currentPrice Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[] // Relation to the join table
}

// Join table to represent the many-to-many relationship
model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  productId       Int
  priceAtPurchase Float // Captures price at the time of purchase
  quantity        Int
  createdAt       DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId]) // Ensures a product can't be added to the same order twice
}

enum OrderEnum {
  PENDING
  COMPLETED
  CANCELLED
}

enum RoleEnum {
  USER
  ADMIN
}
